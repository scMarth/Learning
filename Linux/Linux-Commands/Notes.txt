$ curl -s "https://github.com/scMarth/sublime-syntax-themes/commit/9710b086d98fea5e6f47e44db9347383b5e9380b" | grep '<a href=.*\.tmTheme</a>'
      <a href="#diff-5463d21b286891a848452dbc5c038727">Amy.tmTheme</a>
      <a href="#diff-5a788218c94cd7804640cf0515969eed">Bliss.tmTheme</a>
      <a href="#diff-95d8606eb769e3d48d64d7094480fbd4">Dark-Dracula.tmTheme</a>
      <a href="#diff-0a2a7d2ce663c1f9285a4e1d2d1ede80">Dracula.tmTheme</a>
      <a href="#diff-cc5118a5e7f288894762cbfd54728423">Facebook.tmTheme</a>
      <a href="#diff-91cfc81f88a731d143876d32849da548">GooeyPastel.tmTheme</a>
      <a href="#diff-ebf23019e71c70f49d94fcb054522f02">Hail.tmTheme</a>
      <a href="#diff-18fa1267a7cea97044ac7cf6ebdbd6ee">Lavender.tmTheme</a>
      <a href="#diff-d81dc3e47513b05d84ccf28e3e7f0eec">RamdaJS.tmTheme</a>
      <a href="#diff-bd01f5d4db2ad0195e31835ebc1c09c7">Seahorse.tmTheme</a>
      <a href="#diff-ffd0391b6e6bc5e8083e64f0eda0d817">Tomorrow_Night_Blue.tmTheme</a>
      <a href="#diff-187352ba79cfe927ac8599279a102731">Trixie.tmTheme</a>
      <a href="#diff-aab4939ef21d574192baa94de0e389b5">Tron.tmTheme</a>
      <a href="#diff-0fd874ddd2316d1b59f013d94577b529">slate.tmTheme</a>
      <a href="#diff-ab43e2a6921dc0867e30127ac7771464">x3-alpha.tmTheme</a>


$ curl -s "https://github.com/scMarth/sublime-syntax-themes/commit/9710b086d98fea5e6f47e44db9347383b5e9380b" | grep '<a href=.*\.tmTheme</a>' | sed -n -e 's/<a[^>]*>\(.*\)/\1/p'
      Amy.tmTheme</a>
      Bliss.tmTheme</a>
      Dark-Dracula.tmTheme</a>
      Dracula.tmTheme</a>
      Facebook.tmTheme</a>
      GooeyPastel.tmTheme</a>
      Hail.tmTheme</a>
      Lavender.tmTheme</a>
      RamdaJS.tmTheme</a>
      Seahorse.tmTheme</a>
      Tomorrow_Night_Blue.tmTheme</a>
      Trixie.tmTheme</a>
      Tron.tmTheme</a>
      slate.tmTheme</a>
      x3-alpha.tmTheme</a>

Replacing [^>]* with [^>]+ will return 0 results. Apparently, in Linux, the '+' meta-character is only available with the -r option, the 'extended regular expressions'

$ curl -s "https://github.com/scMarth/sublime-syntax-themes/commit/9710b086d98fea5e6f47e44db9347383b5e9380b" | grep '<a href=.*\.tmTheme</a>' | sed -r 's/<a[^>]+>(.*)<\/a>.*$/\1/'
      Amy.tmTheme
      Bliss.tmTheme
      Dark-Dracula.tmTheme
      Dracula.tmTheme
      Facebook.tmTheme
      GooeyPastel.tmTheme
      Hail.tmTheme
      Lavender.tmTheme
      RamdaJS.tmTheme
      Seahorse.tmTheme
      Tomorrow_Night_Blue.tmTheme
      Trixie.tmTheme
      Tron.tmTheme
      slate.tmTheme
      x3-alpha.tmTheme

Note: with extended regular expressions, you don't need a backslash in front of parenthesis ( ), however, you still need a backslash in front of a backslash character, you also don't need /p for print

/***********************************************************************
* Checking Linux ISO Checksums
***********************************************************************/

$ echo "0f3086aa44edd38531898b32ee3318540af9c643c27346340deb2f9bc1c3de7e *ubuntu-16.04.2-desktop-amd64.iso" > cs1

$ sha256sum ubuntu-16.04.2-desktop-amd64.iso > cs2

$ diff cs1 cs2

$

------------------------------------------------------------------------

$ ls
kubuntu-17.10.1-desktop-amd64.iso

$ sha256sum kubuntu-17.10.1-desktop-amd64.iso > cs1

$ echo "1224c233ed014cefe824a289a9e6d7ee446fb79bb1d2bebdd55c87d0ec4feced" > cs2

$ cat cs1
1224c233ed014cefe824a289a9e6d7ee446fb79bb1d2bebdd55c87d0ec4feced *kubuntu-17.10.1-desktop-amd64.iso

$ cut -f 1 -d " " cs1 > cs3

$ diff cs2 cs3

$

------------------------------------------------------------------------

$ ls
Fedora-Workstation-Live-x86_64-27-1.6.iso

$ echo "d242345fa6b5f8cc80e2317c46d15bb1fc4ad70b9a3516c9bc2fb6f3599c8117" > cs1

$ sha256sum Fedora-Workstation-Live-x86_64-27-1.6.iso > cs2

$ cat cs2
d242345fa6b5f8cc80e2317c46d15bb1fc4ad70b9a3516c9bc2fb6f3599c8117 *Fedora-Workstation-Live-x86_64-27-1.6.iso

$ cut -f 1 -d " " cs2 > cs3

$ diff cs1 cs3

$

------------------------------------------------------------------------

$ ls
Fedora-KDE-Live-x86_64-27-1.6.iso

$ echo "5f38cd0c16342d42568392aab842ea1039091e68af617b40e667d1c23f4752c1" > cs1

$ sha256sum Fedora-KDE-Live-x86_64-27-1.6.iso | cut -f 1 -d " " > cs2

$ ls
cs1  cs2  Fedora-KDE-Live-x86_64-27-1.6.iso

$ diff cs1 cs2

$

/***********************************************************************
* sed and grep
***********************************************************************/

from: https://pe.usps.com/text/pub28/28apc_002.htm

$ grep '<p class="tbl9 size9">' abbrevList.html
            <p class="tbl9 size9"><a name="ep551880">ALLEY</a></p>
            <p class="tbl9 size9"><a name="ep551882">ALLEE</a></p>
            <p class="tbl9 size9"><a name="ep551888">ALLEY</a></p>
            <p class="tbl9 size9"><a name="ep551894">ALLY</a></p>
            <p class="tbl9 size9"><a name="ep551900">ALY</a></p>
            <p class="tbl9 size9"><a name="ep551904">ANEX</a></p>
            <p class="tbl9 size9"><a name="ep551906">ANEX</a></p>
            <p class="tbl9 size9"><a name="ep551912">ANNEX</a></p>
            <p class="tbl9 size9"><a name="ep551918">ANNX</a></p>
            <p class="tbl9 size9"><a name="ep551924">ANX</a></p>
            <p class="tbl9 size9"><a name="ep551928">ARCADE</a></p>
            <p class="tbl9 size9"><a name="ep551930">ARC </a></p>
            <p class="tbl9 size9"><a name="ep551936">ARCADE </a></p>
            <p class="tbl9 size9"><a name="ep551940">AVENUE</a></p>
            <p class="tbl9 size9"><a name="ep551942">AV</a></p>
            <p class="tbl9 size9"><a name="ep551948">AVE</a></p>
            <p class="tbl9 size9"><a name="ep551954">AVEN</a></p>
            <p class="tbl9 size9"><a name="ep551960">AVENU</a></p>
            <p class="tbl9 size9"><a name="ep551966">AVENUE</a></p>
            <p class="tbl9 size9"><a name="ep551972">AVN</a></p>
            <p class="tbl9 size9"><a name="ep551978">AVNUE</a></p>
            <p class="tbl9 size9"><a name="ep551982">BAYOU</a></p>
            <p class="tbl9 size9"><a name="ep551984">BAYOO</a></p>
            <p class="tbl9 size9"><a name="ep551990">BAYOU</a></p>
            <p class="tbl9 size9"><a name="ep551994">BEACH</a></p>
            <p class="tbl9 size9"><a name="ep551996">BCH</a></p>
            <p class="tbl9 size9"><a name="ep552002">BEACH</a></p>
            <p class="tbl9 size9"><a name="ep552006">BEND</a></p>
            <p class="tbl9 size9"><a name="ep552008">BEND</a></p>
            <p class="tbl9 size9"><a name="ep552014">BND</a></p>
            <p class="tbl9 size9"><a name="ep552018">BLUFF</a></p>
            <p class="tbl9 size9"><a name="ep552020">BLF</a></p>
            <p class="tbl9 size9"><a name="ep552026">BLUF</a></p>
            <p class="tbl9 size9"><a name="ep552032">BLUFF</a></p>

$ grep '<p class="tbl9 size9">' abbrevList.html | sed -r "s/<p class=\"tbl9 size9\"><a[^>]+>(.*)<\/a><\/p>/\1/"
            ALLEY
            ALLEE
            ALLEY
            ALLY
            ALY
            ANEX
            ANEX
            ANNEX
            ANNX
            ANX
            ARCADE
            ARC
            ARCADE
            AVENUE
            AV
            AVE
            AVEN
            AVENU
            AVENUE
            AVN
            AVNUE
            BAYOU
            BAYOO
            BAYOU
            BEACH
            BCH
            BEACH
            BEND
            BEND


sed 's/regexp/replace'

$ cat test.txt
The quick brown fox jumps over the lazy dog
The quick brown fox jumps over the lazy dog

$ sed 's/[Tt]he/An/' test.txt
An quick brown fox jumps over the lazy dog
An quick brown fox jumps over the lazy dog

The default functionality of sed is one replacement per line. By default, it is the first expression that is going to be changed.

$ sed 's/[Tt]he/An/2' test.txt
The quick brown fox jumps over An lazy dog
The quick brown fox jumps over An lazy dog

However, in the above example, you can specify the second expression to be changed. If the line only has one match, and you specify it to change the second match, then the first match will remain unchanged.

$ sed 's/[Tt]he/An/g' test.txt
An quick brown fox jumps over An lazy dog
An quick brown fox jumps over An lazy dog

You can use 'g' to specify global change.

You can do something like:

$ sed 's/[Tt]he/An/g' test.txt > test2.txt

If you want to do replacement, you can do:

$ sed 's/[Tt]he/An/g' test.txt
An quick brown fox jumps over An lazy dog
An quick brown fox jumps over An lazy dog

$ cat test.txt
The quick brown fox jumps over the lazy dog
The quick brown fox jumps over the lazy dog

$ sed -i 's/[Tt]he/An/g' test.txt

$ cat test.txt
An quick brown fox jumps over An lazy dog
An quick brown fox jumps over An lazy dog

You CANNOT do:

$ cat test2.txt
An quick brown fox jumps over An lazy dog
An quick brown fox jumps over An lazy dog

$ sed 's/An/the/g' test2.txt > test2.txt


$ cat test2.txt

(prints nothing)

By default, slashes need to be escaped:

$ cat demo.txt
config
fancy=on
color=grey
location=/usr/bin/stuff.elf

Goldilocks and the 3 bears
3 little pigs and 3 little houses

$ sed 's/location=\/usr\//location=\/usr\/local\//' demo.txt
config
fancy=on
color=grey
location=/usr/local/bin/stuff.elf

Goldilocks and the 3 bears
3 little pigs and 3 little houses

can also do:

$ sed 's!location=/usr/!location=/usr/local/!' demo.txt
config
fancy=on
color=grey
location=/usr/local/bin/stuff.elf

Goldilocks and the 3 bears
3 little pigs and 3 little houses

as long as you're consistent, sed won't care. By using ! instead of /, you don't have to escape slashes

$ sed -E 's/^(.{5})=/\1,/' demo.txt
config
fancy,on
color,grey
location=/usr/bin/stuff.elf

Goldilocks and the 3 bears
3 little pigs and 3 little houses

-E for extended regular expressions, enables ability to use brackets(parenthesis?) without having to escape them

The \1 in the replace expression is whatever is in parenthesis in the search/match regexp

So putting it together, it means:

let x be any 5 characters after the start of the line (^) and replace x with x,





grep text file

grep romeo shakespeare-romeo.txt

grep by default is case sensitive

you ignore case sensitivity, you can use the -i option

grep -i romeo shakespeare-romeo.txt

grep -r sys.group css/

do a recursive search for 'sys.group' in folder /css/

grep -r sys.group

by default, it searches the current directory recursively.. 

Note: only the -r option will search the current directory for the given search expression if you don't specify a search location. Without the -r option, it won't do that.

grep -n shows the line number

$ grep -rn fox
test.txt:1:An quick brown fox jumps over An lazy dog
test.txt:2:An quick brown fox jumps over An lazy dog


egrep \(Romeo\|Juliet\) shakespeare-romeo.txt

grep -E or egrep for extended regular expressions

$ egrep  -rn "fox"
test.txt:1:An quick brown fox jumps over An lazy dog
test.txt:2:An quick brown fox jumps over An lazy dog


$ ps -a |head
      PID    PPID    PGID     WINPID   TTY         UID    STIME COMMAND
     3576   12484   10464       3576  pty0     1063099 10:23:08 /usr/bin/bash
    11056       1   11056      11056  ?        1063099 09:44:07 /usr/bin/mintty
    10464   12484   10464      13260  pty0     1063099 10:23:08 /usr/bin/ps
S    9656   12484    9656      12936  pty0     1063099 10:15:18 /usr/bin/grep
S   11136   12484   11136       5148  pty0     1063099 10:16:02 /usr/bin/grep
S   10564   12484   10564      12380  pty0     1063099 10:15:56 /usr/bin/grep
    12484   11056   12484        244  pty0     1063099 09:44:07 /usr/bin/bash

$ ps -a | egrep ' [0-9] '
    11056       1   11056      11056  ?        1063099 09:44:07 /usr/bin/mintty


??? using meta-sequences

$ ps -a | grep [[:space:]][[:digit:]][[:space:]]
    11056       1   11056      11056  ?        1063099 09:44:07 /usr/bin/mintty


