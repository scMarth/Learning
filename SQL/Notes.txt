Trigger's can't handle multiple inserts from a script it seems:
    https://stackoverflow.com/questions/42609896/trigger-handle-multiple-inserts





/***********************************************************************
* General
***********************************************************************/

SELECT * FROM Roadway_Centerlines WHERE:
FULLNAME LIKE '%MAIN ST%'

https://www.w3schools.com/sql/trysql.asp?filename=trysql_op_in

SELECT a.Address ALIAS_FOR_ADDRESSES FROM Customers a;
   Customers a : set table 'Customers' with an alias 'a'
   a.Address : 'Customers' is referenced using alias 'a' ; Address is a field in that table
   ALIAS_FOR_ADDRESSES : set the alias for the resulting column as 'ALIAS_FOR_ADDRESSES'


SELECT * FROM OrderDetails;
OrderDetailID  OrderID  ProductID   Quantity
1              10248    11          12
2              10248    42          10
3              10248    72          5
4              10249    14          9




SELECT o.ProductID + o.Quantity sum FROM OrderDetails o;

sum
23
52
77



SELECT * FROM (SELECT *,
   (o.ProductID + o.Quantity) as exp1
    FROM OrderDetails o
) as subquery

OrderDetailID  OrderID  ProductID   Quantity exp1
1              10248    11          12       23
2              10248    42          10       52
3              10248    72          5        77
4              10249    14          9        23


SELECT subquery.OrderDetailID, subquery.ProductID, subquery.Quantity, subquery.exp1 FROM (SELECT *,
   (o.ProductID + o.Quantity) as exp1
    FROM OrderDetails o
) as subquery

OrderDetailID  ProductID   Quantity exp1
1              11          12       23
2              42          10       52
3              72          5        77



SELECT * FROM (SELECT *,
   (o.ProductID + o.Quantity) as exp1
    FROM OrderDetails o
) as subquery
LEFT JOIN Orders o2 ON subquery.OrderID = o2.OrderID


OrderDetailID  OrderID  ProductID   Quantity exp1  CustomerID  EmployeeID  OrderDate   ShipperID
1              10248    11          12       23    90          5           1996-07-04  3
2              10248    42          10       52    90          5           1996-07-04  3
3              10248    72          5        77    90          5           1996-07-04  3
4              10249    14          9        23    81          6           1996-07-05  1

SELECT * FROM Orders;

OrderID  CustomerID  EmployeeID  OrderDate   ShipperID
10248    90          5           1996-07-04  3
10249    81          6           1996-07-05  1
10250    34          4           1996-07-08  2

SELECT * FROM OrderDetails;

OrderDetailID  OrderID  ProductID   Quantity
1              10248    11          12
2              10248    42          10
3              10248    72          5
4              10249    14          9


/***********************************************************************
* Fedora and MariaDB
***********************************************************************/

MariaDB is a community-developed fork of the MySQL relational database management system intended to remain free under the GNU GPL. Development is led by some of the original developers of MySQL, who forked it due to concerns over its acquisition by Oracle Corporation.

https://fedoraproject.org/wiki/MariaDB

systemctl stop mariadb

start:

mysql -uroot -p

MariaDB [(none)]> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.001 sec)

exit:

    MariaDB [(none)]> exit
    Bye
    $

https://www.liquidweb.com/kb/create-a-mysql-database-on-linux-via-command-line/

CREATE DATABASE tutorial_database;

If a database of the same name already exists, then a new database will not be created and youâ€™ll receive this error:

ERROR 1007 (HY000): Can't create database 'tutorial_database'; database exists

To avoid seeing this error use the following command instead:

CREATE DATABASE IF NOT EXISTS tutorial_database;

The above command will only create the database tutorial_database if a database of that name does not already exist.

________________________________________________________________________

SELECT * FROM Customers
WHERE True;

will work in some SQL environments

WHERE OBJECTID LIKE '%'

will work in some SQL environments