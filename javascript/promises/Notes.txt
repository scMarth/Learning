techsith https://www.youtube.com/watch?v=s6SH72uAn3Q

The Coding Train https://www.youtube.com/watch?v=QO4NXhWo_NM

Callback makes sense for this idea of an 'event':
    - when the mouse is pressed, trigger this function, it's an event

If you want to sequence asyncronous things that happen in the program, callbacks can get really unyieldly


function setup(){
    
    loadJSON(param, function(data){
        do something
        loadJSON(param, function(data){
            do something
            someOtherFunction(params, function(data){

            })
        })
    })
}

not sustainable because code keeps getting indented, hard to change




A promise is an Object

loadJSON(url, callback);

let promise = fetch;

Promises can be in different states:
    - pending
    - fulfilled
    - rejected

fetch gets data from url, and returns a promise



function setup(){
    noCanvas();

    let promise = fetch(wordnikAPI);
    promise.then(gotData);
    promise.catch(gotErr);

    function gotData(data){
        console.log(data);
    }

    function gotErr(err){
        console.log(err);
    }
}


https://medium.com/@kvosswinkel/is-javascript-synchronous-or-asynchronous-what-the-hell-is-a-promise-7aa9dd8f3bfb

At its base, Javascript is synchronous, but methods have been created to do stuff asynchronously, like promises.

https://spring.io/understanding/javascript-promises

A promise represents the eventual result of an asynchronous operation. It is a placeholder into which the successful result value or reason for failure will materialize.

https://stackoverflow.com/questions/49685779/why-do-promises-execute-at-the-point-of-declaration

Thinking of promises as "executing" is getting you confused. A promise is purely a notification mechanism. It is typically tied to some underlying asynchronous operation and when you create the promise, the asynchronous operation is typically started.

Promise.all() is then used to track when a whole bunch of asynchronous operations that you've already started have completed (or ended with an error).

So, you don't use Promise.all() to start a bunch of things. You use it just to track when they are all done and they are started elsewhere in your code.

When you manually create a promise with new Promise(), the promise executor is executed immediately. That's how they are designed.

If you had real asynchronous operations in your promise executor and you were doing console.log() when those operations completed, you'd probably not find any issue with how promises are designed. I think most of your confusion stems from the fact that you don't actually have any asynchronous operation inside your promise executor and thus there's really no reason to even use a promise for that. Promises are designed to track the completion of asynchronous operations. No reason to use them if you don't have an actual asynchronous operation.

It's not an uncommon confusion. But, if you have a function that returns a promise, think of it like this. The function starts an asynchronous operation, then creates a new promise and hooks it up to monitor that asynchronous operation. The function then returns that promise that's like a tracker you can use to know when the async operation is done and what result it finished with. The promise is not the operation itself, just a tracking mechanism. One would typically have a single function to both start an async operation and get a promise back to track it.