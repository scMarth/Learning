https://youtu.be/TlB_eWDSMt4

Node is a runtime environment for executing Javascript Code.

Before Node, we used Javascript only to build applications that run inside of a browser. Every browser has what we call a 'Javascript engine' that takes JS code and converts it into machine code that a computer can understand.

Microsoft Edge uses Chakra
FireFox uses SpiderMonkey
Chrome uses v8

That's why JS code can behave differently depending on the browser.

The browser provides the runtime environment for JS code.

Up to 2009, the only way to execute JS code was inside of a browser. In 2009, the creater of Node, Ryan Dahl thought it would be great to execute JS outside of a browser. So he took Google's v8 engine, which is the fastest JS engine, and embedded it inside a C++ program and called that program Node.exe.

Similar to a browser, Node is a runtime environment for JS code. It contains a JS engine that can execute our JS code. It also has certain objects that provide an environment for our JS code, but these objects are different from the environment objects we have in browsers.

For example, we don't have the document object. We have other objects that give us more interesting capabilities. For example, we can work with the file system with fs.readFile() or listen for requests with http.createServer().

Node is not a framework.

Node applications are highly-scalable, data-intensive because of the non-blocking, asynchronous nature of Node. Node applications are asynchronous by default. In Node, we have a single thread handle all requests. When a request arrives, that thread is used to handle that request. If I need to query a database, the thread doesn't have to wait for the database to return the data. While the database is executing the query, that thread will be used to serve another client. When the database prepares the result, it puts a message in what is called the 'Event Queue'. Node is continuously monitoring this queue in the background. When it finds an event in this queue, it will take it out and process it. This architecture makes Node ideal for I/O-intensive applications that include a lot of disc or network actions.

Do not use Node for CPU-intensive applications like video encoding or image manipulation service.

    node --v
    node app.js

If you try to do:

   console.log(window);

It won't work because in Node, we don't have the 'window' or 'document' objects.

Some of the modules built into the core of Node:
   os - operating system
   fs - file system
   events
   http

Global:
   console.log()

   setTimeout()
   clearTimeout()

   setInterval()
   clearInterval()

In browsers, we have the 'window' object that represents our global scope. All the variables and functions defined globally can be accessed via the 'window' object.

   e.g. window.console.log() or window.setTimeout()

   var message = '';
   window.message

In Node, instead of 'window', we have 'global'

   e.g. global.console.log();

   var message = '';
   global.message

This won't work. Variables / functions are not added to the global object. Their only scope is the file that they are in. That is because Node is a modular system.

In real world applications, we often split our JS into multiple files. It's possible that we have 2 files and in both files, we have a function with the same name. Because the function is added to the global scope, when we define the function in another file, we're overwriting it.

In order to build reliable and maintainable applications, we should avoid defining variables and functions in the global scope. Instead, we need modularity.

At the core of Node, we have a concept called 'module'. Every file in a Node application is considered a module. The variables and functions we define in that file are scoped to that file. In object oriented terms, we say they are 'private', or not available outside that container.

You can do:

   console.log(module);

If we add to module.exports, anything added to it will be available outside of that module.

   require('./logger')

The above returns the exports for ./logger.js (.js isn't necessary, because .js is assumed)

As best practice, when loading a module using the require function, it's better to store the result in a constant.

   const logger = require('./logger');

$jshint app.js

With jshint, we can scan all JS code for errors.

   (function (exports, require, module, __filename, __dirname){
      var url = 'http://mylogger.io/log';

      function log(message){
         console.log(message);
      }

      module.exports = log;
   })

Node doesn't execute our code directly. It always wraps the code inside each module inside of a function, something like in above. We call this function the Module Wrapper Function.

In Node, we have some useful modules that are built into the core of Node. Find them here:
   https://nodejs.org/dist/latest-v12.x/docs/api/

   console.log('Total Memory ' + totalMemory);

The above can be simplified by using a template string, which is available in recent versions of JS referred to as ES6 / ES2015 which is short for ECMAScript 6

Every year, ECMA defines new features that should be added to JS. Different browsers implement different sets of these features. The v8 engine is pretty up-to-date, and implements a lot of new features defined in ECMAScript.

In ES6, we have a feature called template string, which helps us build a string without concatenations.

   console.log(`Total Memory: ${totalMemory}`);

One of the core concepts in Node is the concept of events. A lot of Node's core functionality is based on this concept of events.

An event is a signal that something has happened.

In Node, we have a class called 'http' that we can use to build a web server. So, we listen on a given port, and every time we recieve a request on that port, that http class raises an event. Our job is to respond to that event, which basically involves reading that request and returning the right response.

   const EventEmitter = require('events');

Note that in terms of the naming, the first letter of every word is upper-case. This is a convention that indicates that this EventEmitter is a class, which is a container for properties and functions which we call methods.

In the real world, it's quite rare to work with the EventEmitter object directly. Instead, we want to create a class that has all the capabilities of the EventEmitter, then use that class in your code.

https://www.youtube.com/watch?v=pKd0Rpw7O48

Express - the most popular framework for building services on top of Node

   mkdir express-demo
   npm init --yes
   npm i express

http://expressjs.com/en/4x/api.html#req

http://localhost:3000/

stop service with ctrl + c

   sudo npm i -g nodemon

   nodemon index.js

nodemon automatically refreshes the service once you update the code

Set the environment variable with:

   export PORT=5000

To call http services, we use a Chrome extension called postman. (Looks like the Chrome extension is being deprecated though)

As a security best practice, you should never ever ever trust what the client sends you. You should always vaidate the input.

npm package that makes it really easy to validate input: joi (deprecated)