From ChatGPT regarding versioned views:

	RANCHES_EVW (Versioned View) (base table is RANCHES)

	Versioned View: This is a special view created automatically by ArcGIS when a feature class is registered as versioned. The versioned view (_EVW) facilitates working with versioned data in an enterprise geodatabase.
	Purpose: It provides a unified view that combines data from the base table (RANCHES), the Adds table (RANCHES_A), and the Deletes table (RANCHES_D) to present a version-aware view of the data. This view respects the versioning logic, allowing different versions of the data to coexist and be edited independently.

	Structure: The versioned view merges data from the base table and versioning tables to show the current state of the data as per the active version.
	Adds Table (RANCHES_A): Stores the records that have been added in different versions.
	Deletes Table (RANCHES_D): Stores the records that have been deleted in different versions.
	Versioning Logic: The versioned view uses this logic to present the data as if all edits were made directly to the base table, taking into account the current version context.

	Updating the versioned view vs. updating the base table directly:

		Updating RANCHES_EVW
		Version Awareness: When you update the RANCHES_EVW view, the update is version-aware. This means that the change is recorded in the context of the active version. If you are working in a specific version, the change will only affect that version and will not immediately impact other versions.
		Tracking Edits: The update is tracked and managed in the versioning system. It updates the appropriate records in the Adds (RANCHES_A) and Deletes (RANCHES_D) tables to maintain the version history and support reconciliation and posting operations.
		Isolation: The changes made in the versioned view are isolated to your editing session or version until you reconcile and post them to the default or other versions.

		Updating RANCHES (Base Table)
		Direct Update: When you update the RANCHES table directly, you bypass the versioning system. The change is immediately applied to the base table and affects all versions.
		No Version Tracking: The direct update does not create records in the Adds or Deletes tables. As a result, there is no tracking of the edit within the versioning framework. This can lead to data integrity issues if other users are editing different versions.
		Potential Conflicts: Direct updates can cause conflicts and inconsistencies because they do not respect the versioning logic. Other users working in different versions might not see these changes, leading to potential conflicts during reconciliation.


SELECT OBJECTID, BERRY_TYPE, Value AS "BERRY TYPE DESC", Code
FROM DB_NAME.user.APPLICATION_BLOCKS LEFT OUTER JOIN
 (SELECT
   codedValue.value('Code[1]','nvarchar(max)') AS "Code",
   codedValue.value('Name[1]', 'nvarchar(max)') AS "Value"
  FROM DB_NAME.sde.GDB_ITEMS AS items INNER JOIN DB_NAME.sde.GDB_ITEMTYPES AS itemtypes 
  ON items.Type = itemtypes.UUID
  CROSS APPLY items.Definition.nodes
   ('/GPCodedValueDomain2/CodedValues/CodedValue') AS CodedValues(codedValue)
  WHERE itemtypes.Name = 'Coded Value Domain' 
   AND items.Name = 'BERRY_TYPES') AS CodedValues
 ON DB_NAME.user.APPLICATION_BLOCKS.BERRY_TYPE = CodedValues.Code


with subtypes based on berry type:

SELECT OBJECTID, BERRY_TYPE, PLANT_TYPE, Value AS "PLANT TYPE DESC", Code, itemName
FROM DB_NAME.user.APPLICATION_BLOCKS LEFT OUTER JOIN
 (SELECT
   codedValue.value('Code[1]','nvarchar(max)') AS "Code",
   codedValue.value('Name[1]', 'nvarchar(max)') AS "Value",
   items.Name as "itemName"
  FROM DB_NAME.sde.GDB_ITEMS AS items INNER JOIN DB_NAME.sde.GDB_ITEMTYPES AS itemtypes 
  ON items.Type = itemtypes.UUID
  CROSS APPLY items.Definition.nodes
   ('/GPCodedValueDomain2/CodedValues/CodedValue') AS CodedValues(codedValue)
  WHERE itemtypes.Name = 'Coded Value Domain' 
   AND items.Name IN ('PLANT_TYPES_RASP', 'PLANT_TYPES_STRAW', 'PLANT_TYPES_BLUE', 'PLANT_TYPES_BLACK')) AS CodedValues
 ON DB_NAME.user.APPLICATION_BLOCKS.PLANT_TYPE = CodedValues.Code


 select
	items.Name,
	codedValue.value('Code[1]','nvarchar(max)') AS "Code",
	codedValue.value('Name[1]', 'nvarchar(max)') AS "Value"
from DB_NAME.sde.GDB_ITEMS as items CROSS APPLY items.Definition.nodes('/GPCodedValueDomain2/CodedValues/CodedValue') AS CodedValues(codedValue)

view values in a domain table called TREATMENT_TYPES_RASP:

select
    items.Name,
    codedValue.value('Code[1]','nvarchar(max)') AS "Code",
    codedValue.value('Name[1]', 'nvarchar(max)') AS "Value"
from PROD_ATLAS_01.sde.GDB_ITEMS as items CROSS APPLY items.Definition.nodes('/GPCodedValueDomain2/CodedValues/CodedValue') AS CodedValues(codedValue)
where items.Name like '%TREATMENT_TYPES_RASP%'



select * from DB_NAME.sde.GDB_ITEMS
    Name: PLANT_TYPES_BLACK
    Type: 8C368B12-A12E-4C7E-9638-C9C64E69E98F

select * from DB_NAME.sde.GDB_ITEMTYPES
    UUID: 8C368B12-A12E-4C7E-9638-C9C64E69E98F
    Name: Coded Value Domain



SELECT
	a.OBJECTID,
	a.PLANT_TYPE,
	CodedValues.Code,
	CodedValues.Value,
	CodedValues.itemName
FROM DB_NAME.user.APPLICATION_BLOCKS_EVW AS a
LEFT OUTER JOIN (
	SELECT
		codedValue.value('Code[1]','nvarchar(max)') AS "Code",
		codedValue.value('Name[1]', 'nvarchar(max)') AS "Value",
		items.Name as "itemName"
	FROM DB_NAME.sde.GDB_ITEMS AS items INNER JOIN DB_NAME.sde.GDB_ITEMTYPES AS itemtypes
	ON items.Type = itemtypes.UUID
	CROSS APPLY items.Definition.nodes
	('/GPCodedValueDomain2/CodedValues/CodedValue') AS CodedValues(codedValue)
	WHERE itemtypes.Name = 'Coded Value Domain'
	AND items.Name IN ('PLANT_TYPES_RASP', 'PLANT_TYPES_STRAW', 'PLANT_TYPES_BLUE', 'PLANT_TYPES_BLACK')) AS CodedValues
ON a.PLANT_TYPE = CodedValues.Code
LEFT OUTER JOIN DB_NAME.user.TRANSACTIONAL_RANCH_NUMBERS AS t ON a.TRANSACTIONAL_RANCH_NUMBER = t .TRANSACTIONAL_RANCH_NUMBER
LEFT OUTER JOIN DB_NAME.user.DOMAIN_FIELD_TYPES AS dft ON t .FIELD_TYPE = dft.CODE
LEFT OUTER JOIN DB_NAME.user.DOMAIN_BERRY_TYPES AS dbt ON a.BERRY_TYPE = dbt.CODE
OUTER APPLY
(
	SELECT TOP 1 *
	FROM DB_NAME.user.RBA_APPLICATION_IDS rid
	WHERE
		dbt.DESCRIPTION = rid.BerryType
		AND a.VARIETY_ID = rid.Variety
		AND a.TREATMENT_TYPE = rid.TreatmentType
		AND rid.Month = CASE
			WHEN MONTH(a.TREATMENT_START_DATE) = 1 THEN 'January'
			WHEN MONTH(a.TREATMENT_START_DATE) = 2 THEN 'February'
			WHEN MONTH(a.TREATMENT_START_DATE) = 3 THEN 'March'
			WHEN MONTH(a.TREATMENT_START_DATE) = 4 THEN 'April'
			WHEN MONTH(a.TREATMENT_START_DATE) = 5 THEN 'May'
			WHEN MONTH(a.TREATMENT_START_DATE) = 6 THEN 'June'
			WHEN MONTH(a.TREATMENT_START_DATE) = 7 THEN 'July'
			WHEN MONTH(a.TREATMENT_START_DATE) = 8 THEN 'August'
			WHEN MONTH(a.TREATMENT_START_DATE) = 9 THEN 'September'
			WHEN MONTH(a.TREATMENT_START_DATE) = 10 THEN 'October'
			WHEN MONTH(a.TREATMENT_START_DATE) = 11 THEN 'November'
			WHEN MONTH(a.TREATMENT_START_DATE) = 12 THEN 'December'
		END
		AND rid.Timing = CASE
			WHEN a.TREATMENT_START_DATE IS NULL THEN NULL 
			ELSE CASE
				WHEN DAY(a.TREATMENT_START_DATE) < 16 THEN 'Early'
				ELSE 'Late' END
			END
) rbaid


