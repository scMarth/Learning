Area of a polygon (planar, after projecting to projected coordinate system):
    IPolygon4 poly = row.Value[row.Fields.FindField("SHAPE")] as IPolygon4;

    this.Log(new List<String> { "sr factory code before: " + poly.SpatialReference.FactoryCode.ToString() });

    ISpatialReferenceFactory srFactory = new SpatialReferenceEnvironment();
    IProjectedCoordinateSystem pcs = srFactory.CreateProjectedCoordinateSystem(3857);

    IArea before = poly as IArea;
    this.Log(new List<String> { "before centroid: X: " + before.Centroid.X.ToString() + " Y: " + before.Centroid.Y.ToString() });

    ISpatialReference sr = pcs;
    poly.Project(sr);

    this.Log(new List<String> { "sr factory code after: " +  poly.SpatialReference.FactoryCode.ToString() });
    IArea area = poly as IArea;
    this.Log(new List<String> { "area: " + area.Area.ToString() });

Area of polygon (geodesic):

    IPolygon4 poly = row.Value[row.Fields.FindField("SHAPE")] as IPolygon4;

    this.Log(new List<String> { "sr factory code before: " + poly.SpatialReference.FactoryCode.ToString() });

    ISpatialReferenceFactory srFactory = new SpatialReferenceEnvironment();
    IProjectedCoordinateSystem pcs = srFactory.CreateProjectedCoordinateSystem(3857);

    IAreaGeodetic geodeticArea = poly as IAreaGeodetic;
    ILinearUnit ilu = pcs.CoordinateUnit as ILinearUnit;

    double areaGeodesic = geodeticArea.AreaGeodetic[esriGeodeticType.esriGeodeticTypeGeodesic, ilu];
    areaGeodesicHa = areaGeodesic / 10000;
    this.Log(new List<String> { "areaGeodesicHa: " + areaGeodesicHa.ToString() });




Accessing Polygon Coordinates in ArcObjects:
    Solution Explorer > right-click References > Add Reference... > Add using ESRI.ArcGIS.Geometry;
    https://gis.stackexchange.com/questions/267913/how-to-access-the-polygon-vertices-in-arcobjects

    public static void PolygonToString(IPolygon4 polygon)
    {
        IGeometryBag exteriorRingGeometryBag = polygon.ExteriorRingBag;
        IGeometryCollection exteriorRingGeometryCollection = exteriorRingGeometryBag as IGeometryCollection;
        Console.WriteLine("polygon.ExteriorRingCount = " + exteriorRingGeometryCollection.GeometryCount);
        for (int i = 0; i < exteriorRingGeometryCollection.GeometryCount; i++)
        {
            Console.WriteLine("polygon.ExteriorRing[" + i + "]");
            IGeometry exteriorRingGeometry = exteriorRingGeometryCollection.get_Geometry(i);
            IPointCollection exteriorRingPointCollection = exteriorRingGeometry as IPointCollection;
            for (int j = 0; j < exteriorRingPointCollection.PointCount; j++)
            {
                Console.WriteLine("Point[" + j + "] = " + PointToString(exteriorRingPointCollection.get_Point(j)));
            }
            IGeometryBag interiorRingGeometryBag = polygon.get_InteriorRingBag(exteriorRingGeometry as IRing);
            IGeometryCollection interiorRingGeometryCollection = interiorRingGeometryBag as IGeometryCollection;
            Console.WriteLine("polygon.InteriorRingCount[exteriorRing" + i + "] = " + interiorRingGeometryCollection.GeometryCount);
            for (int k = 0; k < interiorRingGeometryCollection.GeometryCount; k++)
            {
                Console.WriteLine("polygon.InteriorRing[" + k + "]");
                IGeometry interiorRingGeometry = interiorRingGeometryCollection.get_Geometry(k);
                IPointCollection interiorRingPointCollection = interiorRingGeometry as IPointCollection;
                for (int m = 0; m < interiorRingPointCollection.PointCount; m++)
                {
                    Console.WriteLine("Point[" + m + "] = " + PointToString(interiorRingPointCollection.get_Point(m)));
                }
            }
        }
    }


    private static string PointToString(IPoint point)
    {
        return (point.X + ", " + point.Y + ", " + point.Z);
    }