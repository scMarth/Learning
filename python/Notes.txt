https://www.computerhope.com/jargon/p/pythonic.htm

    Python philosophy of writing code:
        - beautiful is better than ugly
        - explicit is better than implicit
        - simple is better than complex
        - complex is better than complicated
        - flat is better than nested
        - sparse is better than dense
        - readability counts

function names should be lowercase, with words separated by underscores as necessary to improve readability

mixedCase is only allowed in contexts where that's already the prevailing style


Type                        Public                      Internal
Packages                    lower_with_under
Modules                     lower_with_under            _lower_with_under
Classes                     CapWords                    _CapWords
Exceptions                  CapWords
Functions                   lower_with_under()          _lower_with_under()
Global/Class Constants      CAPS_WITH_UNDER             _CAPS_WITH_UNDER
Global/Class Variables      lower_with_under            _lower_with_under
Instance Variables          lower_with_under            _lower_with_under (protected) or __lower_with_under (private)
Method Names                lower_with_under()          _lower_with_under (protected) or __lower_with_under (private)
Function/Method Parameters  lower_with_under
Local Variables             lower_with_under

python passes by reference by default:

>>> obj = {"routes" : ["c:/", "j:/", "m:/"]}
>>> obj
{'routes': ['c:/', 'j:/', 'm:/']}
>>> obj['routes']
['c:/', 'j:/', 'm:/']
>>> obj2 = {}
>>> obj2['routes'] = obj['routes']
>>> obj
{'routes': ['c:/', 'j:/', 'm:/']}
>>> obj2
{'routes': ['c:/', 'j:/', 'm:/']}
>>> obj2['routes'].append("hello")
>>> obj2
{'routes': ['c:/', 'j:/', 'm:/', 'hello']}
>>> obj
{'routes': ['c:/', 'j:/', 'm:/', 'hello']}
>>> 

In the next example, one modifies the source hashmap and one doesn't:

>>> obj1 = {'one' : ['hello', 'world'], 'ivy' : ['three', 'four']}
>>> obj2 = {'ivy' : ['dust', 'extend'], 'cervy' : ['drown', 'pirate']}
>>> def merge_str_to_arr_map(map1, map2):
    result = {}
    for hashmap in [map1, map2]:
        if hashmap == {}:
            continue
        for key in hashmap:
            if key not in result:
                result[key] = []
                for val in hashmap[key]:
                    result[key].append(val)
            else:
                for string in hashmap[key]:
                    if string not in result[key]:
                        result[key].append(string)
    return result

>>> def merge_str_to_arr_map2(map1, map2):
    result = {}
    for hashmap in [map1, map2]:
        if hashmap == {}:
            continue
        for key in hashmap:
            if key not in result:
                result[key] = hashmap[key]
            else:
                for string in hashmap[key]:
                    if string not in result[key]:
                        result[key].append(string)
    return result

>>> res = merge_str_to_arr_map(obj1, obj2)
>>> res
{'cervy': ['drown', 'pirate'], 'ivy': ['three', 'four', 'dust', 'extend'], 'one': ['hello', 'world']}
>>> obj1
{'ivy': ['three', 'four'], 'one': ['hello', 'world']}
>>> obj2
{'cervy': ['drown', 'pirate'], 'ivy': ['dust', 'extend']}
>>> 
>>> res = merge_str_to_arr_map2(obj1, obj2)
>>> res
{'cervy': ['drown', 'pirate'], 'ivy': ['three', 'four', 'dust', 'extend'], 'one': ['hello', 'world']}
>>> obj1
{'ivy': ['three', 'four', 'dust', 'extend'], 'one': ['hello', 'world']}
>>> obj2
{'cervy': ['drown', 'pirate'], 'ivy': ['dust', 'extend']}
>>> 


========================================================================
= Windows
========================================================================

Install Python https://www.python.org/

This installation now comes with pip. To install modules with pip, go to

C:\Users\Vincent\AppData\Local\Programs\Python\Python37-32\Scripts

Open Command Prompt in this location, then just do
    > pip install requests

Probably a good idea to test the modules in IDLE with
    > import requests

Using python in Windows:
    $ py hello.py3

========================================================================
= Format printing in Python3
========================================================================

https://www.python-course.eu/python3_formatted_output.php


>>> "hello {} {}".format("world", "what")
'hello world what'
>>> "hello {0} {0}".format("world", "what")
'hello world world'
>>> 