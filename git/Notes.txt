Merging a feature into a branch
    https://www.atlassian.com/git/tutorials/using-branches/git-merge#:~:text=Merging%20is%20Git's%20way%20of,merge%20into%20the%20current%20branch.

        # Start a new feature
        git checkout -b new-feature master
        # Edit some files
        git add <file>
        git commit -m "Start a feature"
        # Edit some files
        git add <file>
        git commit -m "Finish a feature"
        # Merge in the new-feature branch
        git checkout master
        git merge new-feature
        git branch -d new-feature


You can download a specific subdirectory of a repository on github using svn:

e.g.

https://github.com/GNOME/gtk/tree/master/gtk/theme/Adwaita

For master branch, replace '/tree/master/' with '/trunk/'

svn checkout https://github.com/GNOME/gtk/trunk/gtk/theme/Adwaita

For foo branch, use /branches/foo/

full path: branches/foo/foldername

Cloning private repos:
    https://github.community/t/clone-private-repo/1371/2

    git clone https://strafe:mygithubpassword@github.com/strafe/project.git

    git clone https://strafe:accesstoken@github.com/strafe/project.git



Git Submodules:

cd into the right location

$ pwd
github/Learning/git

want to add this as a submodule: https://github.com/scMarth/auxiliary-python-libraries

git submodule add https://github.com/scMarth/auxiliary-python-libraries

or alternatively, you can specify a path after the above command

a new .gitmodules should have been created

Pulling in Upstream Changes
The simplest model of using submodules in a project would be if you were simply consuming a subproject and wanted to get updates from it from time to time but were not actually modifying anything in your checkout. Let’s walk through a simple example there.

Let's say that the auxiliary-python-libraries has changed after a while

If you want to check for new work in a submodule, you can go into the directory and run git fetch and git merge the upstream branch to update the local code.

so run
   
   cd into directory of the submodule

   cd /git/auxiliary-python-libraries/

   git fetch

   git merge


now, when you do git status, you will see:

   modified:   git/auxiliary-python-libraries (new commits)

you can now commit it as usual

There is an easier way to do this as well, if you prefer to not manually fetch and merge in the subdirectory. If you run git submodule update --remote, Git will go into your submodules and fetch and update for you.

git commit -mv
   m = msg
   v = verbose ; show unified diff between HEAD commit and what would be committed

view username and email:

    git config --global user.email
    git config --global user.name

    set them with:

    git config --global user.email "email@example.com"

Using multiple accounts:

    Let's say you have a second account, "acc2" with password "pw_1st_token pw_2nd_token" that has a repository "repo2"

    git add .
    git commit -m "msg"
    git push https://acc2:pw_1st_token%20pw_2nd_token@github.com/acc2/repo2

    If you run into "remote: Permission to repo denied to username.",

    Windows Key > Type "Credential Manager" > Credential Manager > Windows Credentials > delete git:https://github.com


    cd to folder
    git config user.email "email.com"
    git config user.name "username"
    git config --list

    https://www.youtube.com/watch?v=oFYyTZwMyAg
    merge pull request from branch
        git branch branchName
        git checkout branchName
        ..
        (make changes)
        ..
        git add .
        git commit -m 'msg'
        git push --set-upstream origin soe-info

        (you can now merge pull request / delete branch)


Clearing git bash history:

    https://www.techrepublic.com/article/how-to-effectively-clear-your-bash-history/

    cat /dev/null > ~/.bash_history

    That will empty out the contents of the file, but keep the file in place.

    This is a surefire method of clearing out your bash history. Don't always rely on the history -c command, because you never know when a second (or a third) terminal is still open, ready to keep that history retained.



Pulling changes from master into dev branch:
    https://stackoverflow.com/questions/20101994/git-pull-from-master-into-the-development-branch

    git checkout dmgr2
    git fetch origin
    git merge origin/master

    push changes
    git push origin dmgr2




Syncing your fork to the original repository via the browser:

    https://github.com/KirstieJane/STEMMRoleModels/wiki/Syncing-your-fork-to-the-original-repository-via-the-browser

    1.) Open your fork of the repository.

    2.) Click the compare button.

        This will open a page titled Comparing Changes and if you look carefully you'll have jumped to the upstream version of the repository. If you were to do a regular pull request then this makes sense as you'd be bringing your changes into the upstream version. But in this case we want to flip the direction and pull changes from the original version to our fork.

    3.) Change the base fork to your repository

    4.) You're now back to your fork but you've also asked to compare two identical repositories so GitHub thinks you care about branches not forks. Click on compare across forks to get back your base fork option.

    5.) Change the head fork to the upstream (original) repository

        Note at this point that if you were in control of everything at GitHub you would probably just have put a little button in between the base for and head fork that would have flipped them for you rather than doing all these clicks. You might even had added in a separate button to check for upstream changes! But they do know that this is a bit of a silly hack and they're working hard on a bunch of other cool stuff so we'll let them off this one.

    6.) You'll see one of two options:

        - "There isn’t anything to compare" This means you're up to date and you don't have to do anything. Phew. :relieved:
        - A list of commits. These are the changes that have happened in the repository since you forked your version. Go to step 7.
    7.) Create a pull request

        Note that this pull request is to you! So you can confirm that it's ok and merge it when necessary. And if there are any merge conflicts then it's up to you to figure out what's gone wrong and sort them out.

    And now you're ready to continue working on your fork