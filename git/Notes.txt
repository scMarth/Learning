You can download a specific subdirectory of a repository on github using svn:

e.g.

https://github.com/GNOME/gtk/tree/master/gtk/theme/Adwaita

For master branch, replace '/tree/master/' with '/trunk/'

svn checkout https://github.com/GNOME/gtk/trunk/gtk/theme/Adwaita

For foo branch, use /branches/foo/

full path: branches/foo/foldername



Git Submodules:

cd into the right location

$ pwd
github/Learning/git

want to add this as a submodule: https://github.com/scMarth/auxiliary-python-libraries

git submodule add https://github.com/scMarth/auxiliary-python-libraries

or alternatively, you can specify a path after the above command

a new .gitmodules should have been created

Pulling in Upstream Changes
The simplest model of using submodules in a project would be if you were simply consuming a subproject and wanted to get updates from it from time to time but were not actually modifying anything in your checkout. Letâ€™s walk through a simple example there.

Let's say that the auxiliary-python-libraries has changed after a while

If you want to check for new work in a submodule, you can go into the directory and run git fetch and git merge the upstream branch to update the local code.

so run
   
   cd into directory of the submodule

   cd /git/auxiliary-python-libraries/

   git fetch

   git merge


now, when you do git status, you will see:

   modified:   git/auxiliary-python-libraries (new commits)

you can now commit it as usual

There is an easier way to do this as well, if you prefer to not manually fetch and merge in the subdirectory. If you run git submodule update --remote, Git will go into your submodules and fetch and update for you.

git commit -mv
   m = msg
   v = verbose ; show unified diff between HEAD commit and what would be committed

view username and email:

    git config --global user.email
    git config --global user.name

    set them with:

    git config --global user.email "email@example.com"

Using multiple accounts:

    Let's say you have a second account, "acc2" with password "pw_1st_token pw_2nd_token" that has a repository "repo2"

    git add .
    git commit -m "msg"
    git push https://acc2:pw_1st_token%20pw_2nd_token@github.com/acc2/repo2

    If you run into "remote: Permission to repo denied to username.",

    Windows Key > Type "Credential Manager" > Credential Manager > Windows Credentials > delete git:https://github.com

Clearing git bash history:

    https://www.techrepublic.com/article/how-to-effectively-clear-your-bash-history/

    cat /dev/null > ~/.bash_history

    That will empty out the contents of the file, but keep the file in place.

    This is a surefire method of clearing out your bash history. Don't always rely on the history -c command, because you never know when a second (or a third) terminal is still open, ready to keep that history retained.
