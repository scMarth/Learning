You can download a specific subdirectory of a repository on github using svn:

e.g.

https://github.com/GNOME/gtk/tree/master/gtk/theme/Adwaita

For master branch, replace '/tree/master/' with '/trunk/'

svn checkout https://github.com/GNOME/gtk/trunk/gtk/theme/Adwaita

For foo branch, use /branches/foo/

full path: branches/foo/foldername



Git Submodules:

cd into the right location

$ pwd
github/Learning/git

want to add this as a submodule: https://github.com/scMarth/auxiliary-python-libraries

git submodule add https://github.com/scMarth/auxiliary-python-libraries

or alternatively, you can specify a path after the above command

a new .gitmodules should have been created

Pulling in Upstream Changes
The simplest model of using submodules in a project would be if you were simply consuming a subproject and wanted to get updates from it from time to time but were not actually modifying anything in your checkout. Letâ€™s walk through a simple example there.

Let's say that the auxiliary-python-libraries has changed after a while

If you want to check for new work in a submodule, you can go into the directory and run git fetch and git merge the upstream branch to update the local code.

so run
   
   cd into directory of the submodule

   cd /git/auxiliary-python-libraries/

   git fetch

   git merge


now, when you do git status, you will see:

   modified:   git/auxiliary-python-libraries (new commits)

you can now commit it as usual


